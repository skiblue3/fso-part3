{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","contactService","getAll","axios","get","then","response","data","create","newContact","post","deleteContact","id","delete","replaceContact","duplicateContact","put","Notification","message","error","notificationStyle","background","fontSize","borderStyle","borderRadius","padding","marginBottom","color","style","Contact","person","handleDelete","name","number","value","onClick","Filter","search","handleSearch","onChange","PersonForm","values","addContact","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Persons","searchPerson","map","App","useState","persons","setPersons","setNewName","setNewNumber","setSearch","errorMessage","setErrorMessage","setError","useEffect","returnedContacts","console","log","filter","toLowerCase","includes","event","target","preventDefault","reduce","arr","concat","trim","window","confirm","duplicate","find","changedDuplicate","returnedContact","setTimeout","delContact","changedPersons","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.409e8f59.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)  \r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newContact) => {\r\n  const request = axios.post(baseUrl, newContact)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n  const request = axios.delete(`http://localhost:3001/persons/${id}`)\r\n  return request\r\n}\r\n\r\nconst replaceContact = (duplicateContact) => {\r\n  const request = axios.put(`http://localhost:3001/persons/${duplicateContact.id}`, duplicateContact)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst contactService = {\r\n  getAll,\r\n  create,\r\n  deleteContact,\r\n  replaceContact\r\n}\r\n\r\nexport default contactService","import React, { useEffect, useState } from 'react'\nimport contactService from './services/persons'\n\nconst Notification = ({message, error}) => {\n\n  const notificationStyle =  {\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10,\n    color: (error) ? 'red' : 'green'\n  }\n  \n\n  if(message === null) {\n    return null\n  }\n\n  if(error) {\n\n  }\n\n  return (\n    <div style={notificationStyle}>\n      {message}\n    </div>\n  )\n}\n\n// to display single contact details\nconst Contact = ({person, handleDelete}) => {\n  return (\n    <div> \n      {person.name} {person.number} <button value={person.id} onClick={() => handleDelete(person)}>Delete</button>\n    </div>\n  )\n}\n\n// to manage search filter\nconst Filter = ({search, handleSearch}) => {\n  return (\n    <div>\n      filter shown with <input value={search} onChange={handleSearch} />\n    </div>\n  )\n}\n\n// to add new contact to contacts\nconst PersonForm = ({values}) => {\n  const [addContact, newName, handleNameChange, newNumber, handleNumberChange] = values\n\n  return (\n    <div>\n      <form onSubmit={addContact}>\n        <div>name: <input value={newName} onChange={handleNameChange} /></div>\n        <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n        <div><button type=\"submit\" >add</button>\n        </div>\n      </form> \n    </div>\n  )\n}\n\n// to display every contacts\nconst Persons = ({searchPerson, handleDelete}) => {\n  return (\n    <div>\n      {searchPerson.map(person => \n          <Contact key={person.name} person={person} handleDelete={handleDelete}/> )\n      }\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ search, setSearch ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState(null) \n  const [ error, setError ] = useState(true)\n\n  // to get All contacts from server\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(returnedContacts => {\n        console.log('promise fulfilled')\n        setPersons(returnedContacts)\n      })\n  }, [])\n\n  // to filter based on the search box\n  const searchPerson = persons.filter(person => person.name.toLowerCase().includes(search.toLowerCase()))\n\n  // callback functions to help events\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleDelete = (delContact) => {\n    contactService\n      .deleteContact(delContact.id)\n      .then(() => {\n        const changedPersons = persons.filter(person => person.id !== delContact.id)\n        setPersons(changedPersons)\n      })\n      .catch(() => {\n        console.log(\"error occured while deleting element which doesn't exist on server\")\n        setError(true)\n        setErrorMessage(`Information of ${delContact.name} has already been removed from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setPersons(persons.filter(person => person.id !== delContact.id))\n      })\n  }\n\n  // manages add contact in every possible way\n  const addContact = (event) => {\n    event.preventDefault()\n\n    const nameArray = persons.reduce((arr, person) => arr.concat(person.name.toLowerCase()), [])\n\n    if(nameArray.includes(newName.trim().toLowerCase())) {\n      // to handle replacing of number\n\n      const confirm = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n      if(!confirm) {\n        return\n      }\n\n      const duplicate = persons.find(person => person.name.toLowerCase() === newName.trim().toLowerCase())\n      const changedDuplicate = {...duplicate, number: newNumber}\n      \n      contactService\n        .replaceContact(changedDuplicate)  \n        .then(returnedContact => {\n          setPersons(persons.map(person => (person.id !== returnedContact.id) ? person : returnedContact))\n          \n          setNewName('')\n          setNewNumber('')\n          // to handle notification for replaced number\n          setError(false)\n          setErrorMessage(`Replaced the number of ${returnedContact.name}`)  \n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })      \n    } \n    else {\n      const newContact = {\n        name: newName.trim(),\n        number: newNumber,\n      }\n  \n      contactService\n        .create(newContact)\n        .then(returnedContact => {\n          setPersons(persons.concat(returnedContact))\n          setNewName('')\n          setNewNumber('')\n\n          // to handle notification for added contact\n          setError(false)\n          setErrorMessage(`Added ${returnedContact.name}`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={errorMessage} error={error}/>\n\n      <Filter search={search} handleSearch={event => setSearch(event.target.value)} />\n\n      <h2> add a new </h2>\n      <PersonForm values={[addContact, newName, handleNameChange, newNumber, handleNumberChange]} />\n\n      <h2>Numbers</h2>\n      <Persons searchPerson={searchPerson} handleDelete={handleDelete}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}